fitdist(data = dataset[1,1,], "normal")
fitdist(data = dataset[1,1,], "gaussian")
fitdist(data = dataset[1,1,], "norm")
fitdist(data = dataset[1,1,], "lnorm")
fitW <- fitdist(serving, "weibull")
fitg <- fitdist(serving, "gamma")
fitln <- fitdist(serving, "lnorm")
summary(fitW)
summary(fitg)
summary(fitln)
data(groundbeef)
serving <- groundbeef$serving
fitW <- fitdist(serving, "weibull")
fitg <- fitdist(serving, "gamma")
fitln <- fitdist(serving, "lnorm")
summary(fitW)
summary(fitg)
summary(fitln)
source('~/PhD/thesis_phd/uqms/uqms/R/test.R')
fit.multi.dist(dataset[1,1,], c("norm", "lnorm", "gamma"))
hist(dataset[1,1,])
hist(dataset[1,1,], 25)
hist(dataset[1,1,] + 10, 25)
fit.multi.dist(dataset[1,1,] + 10, c("norm", "lnorm", "gamma"))
source('~/PhD/thesis_phd/uqms/uqms/R/test.R')
fit.multi.dist(dataset[1,1,] + 10, c("norm", "lnorm", "gamma"))
dists = c("norm", "lnorm", "gamma")
length(dists)
dists[1]
dists[2]
dists[3]
source('~/PhD/thesis_phd/uqms/uqms/R/test.R')
fit.multi.dist(dataset[1,1,] + 10, c("norm", "lnorm", "gamma"))
fit.multi.dist(dataset[1,1,] + 10, c("norm", "lnorm", "gamma", "pareto", "weibull"))
dgumbel <- function(x, a, b) 1/b*exp((a-x)/b)*exp(-exp((a-x)/b))
pgumbel <- function(q, a, b) exp(-exp((a-q)/b))
qgumbel <- function(p, a, b) a-b*log(-log(p))
fit.multi.dist(dataset[1,1,] + 10, c("norm", "lnorm", "gamma", "dgumbel", "weibull"))
fit.multi.dist(dataset[1,1,] + 10, c("norm", "lnorm", "gamma", "weibull"))
stime <- system.time({
fun.RMFMKL.qs(dataset[1,1,])
})
stime
dists
fitdist
fit.multi.dist(dataset[1,1,] + 10, c("norm", "lnorm", "gamma", "weibull", "unif"))
fit.multi.dist(dataset[1,1,] + 10, c("norm", "lnorm", "gamma", "weibull", "unif", "exp"))
fit.multi.dist(dataset[1,1,] + 10, c("norm", "lnorm", "gamma", "weibull", "unif", "exp"))
stime <- system.time({
fun.RMFMKL.qs(dataset[1,1,] + 10)
})
stime
fit.multi.dist(dataset[1,1,] + 10, c("norm", "lnorm", "gamma", "weibull", "unif", "exp", "beta"))
fit.multi.dist(dataset[1,1,] + 10, c("norm", "lnorm", "gamma", "weibull", "unif", "exp", "t"))
fit.multi.dist(dataset[1,1,] + 10, c("norm", "lnorm", "gamma", "weibull", "unif", "exp", "pois"))
fit.multi.dist(dataset[1,1,] + 10, c("norm", "lnorm", "gamma", "weibull", "unif", "exp", "geom"))
fit.multi.dist(dataset[1,1,] + 10, c("norm", "lnorm", "gamma", "weibull", "unif", "exp"))
fit.multi.dist(dataset[1,1,] + 10, c("norm", "lnorm", "gamma", "weibull", "unif", "exp", "f"))
fit.multi.dist(dataset[1,1,] + 10, c("norm", "lnorm", "gamma", "weibull", "unif", "exp", "gld"))
fit.multi.dist(dataset[1,1,] + 10, c("norm", "lnorm", "gamma", "weibull", "unif", "exp", "gl"))
dgl(dataset[1,1,])
dgl(dataset[1,1,], 0, 2)
dgl(dataset[1,1,] + 10, 0, 2)
dgl(mydata + 10, 0, 2)
dgl(mydata[!is.na(mydata)] + 10, 0, 2)
mydata
dgl(mydata)
dgl(mydata, 0, 2)
dgl(mydata, 0, 2, param = "fmkl")
qgl(seq(0,1,0.02),0,1,0.123,-4.3)
pgl(seq(-2,2,0.2),0,1,-.1,-.2,param="fmkl",inverse.eps=.Machine$double.eps)
install.packages("modes")
library("modes", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
modes(faithful$eruptions)
#Example 4
data<-c(rnorm(15,0,1),rnorm(21,5,1),rep(3,3))
modes(data)
hist(faithful$eruptions)
hist(faithful$eruptions, 25)
density(faithful$eruptions)
fit = density(faithful$eruptions)
plot(fit)
library("GLDEX", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
data = rgl(1000, 0, 2, 4, 4)
hist(data, 25)
hist(data, 50)
fit = density(data)
fit
plot(fit)
fit$x
plot(fit$x)
plot(fit$y)
plot(fit$bw)
plot(fit$n)
fit$call
fit$data.name
fit$has.na
fit$x
plot(fit)
hist(fit$y)
plot(fit)
fit$y
hist(data, 50)
lines(fit)
points(fit)
plot(fit)
d <- density(faithful$eruptions, bw = "sj")
d
plot(d)
plot(d, type = "n")
polygon(d, col = "wheat")
plot(fit, type = "n")
polygon(fit, col = "wheat")
x <- xx <- faithful$eruptions
x[i.out <- sample(length(x), 10)] <- NA
doR <- density(x, bw = 0.15, na.rm = TRUE)
lines(doR, col = "blue")
points(xx[i.out], rep(0.01, 10))
x <- xx <- faithful$eruptions
x[i.out <- sample(length(x), 10)] <- NA
doR <- density(x, bw = 0.15, na.rm = TRUE)
lines(doR, col = "blue")
points(xx[i.out], rep(0.01, 10))
x <- xx <- faithful$eruptions
x[i.out <- sample(length(x), 10)] <- NA
doR <- density(x, bw = 0.15, na.rm = TRUE)
lines(doR, col = "blue")
points(xx[i.out], rep(0.01, 10))
d <- density(faithful$eruptions, bw = "sj")
d
plot(d)
plot(d, type = "n")
polygon(d, col = "wheat")
## Missing values:
x <- xx <- faithful$eruptions
x[i.out <- sample(length(x), 10)] <- NA
doR <- density(x, bw = 0.15, na.rm = TRUE)
lines(doR, col = "blue")
points(xx[i.out], rep(0.01, 10))
## Weighted observations:
fe <- sort(faithful$eruptions) # has quite a few non-unique values
## use 'counts / n' as weights:
dw <- density(unique(fe), weights = table(fe)/length(fe), bw = d$bw)
utils::str(dw) ## smaller n: only 126, but identical estimate:
stopifnot(all.equal(d[1:3], dw[1:3]))
fit <- density(xx)
N <- 1e6
x.new <- rnorm(N, sample(xx, size = N, replace = TRUE), fit$bw)
plot(fit)
lines(density(x.new), col = "blue")
(kernels <- eval(formals(density.default)$kernel))
## show the kernels in the R parametrization
plot (density(0, bw = 1), xlab = "",
main = "R's density() kernels with bw = 1")
for(i in 2:length(kernels))
lines(density(0, bw = 1, kernel =  kernels[i]), col = i)
legend(1.5,.4, legend = kernels, col = seq(kernels),
lty = 1, cex = .8, y.intersp = 1)
plot(density(0, from = -1.2, to = 1.2, width = 2, kernel = "gaussian"),
type = "l", ylim = c(0, 1), xlab = "",
main = "R's density() kernels with width = 1")
for(i in 2:length(kernels))
lines(density(0, width = 2, kernel =  kernels[i]), col = i)
legend(0.6, 1.0, legend = kernels, col = seq(kernels), lty = 1)
(RKs <- cbind(sapply(kernels,
function(k) density(kernel = k, give.Rkern = TRUE))))
100*round(RKs["epanechnikov",]/RKs, 4) ## Efficiencies
bw <- bw.SJ(precip) ## sensible automatic choice
plot(density(precip, bw = bw),
main = "same sd bandwidths, 7 different kernels")
for(i in 2:length(kernels))
lines(density(precip, bw = bw, kernel = kernels[i]), col = i)
plot(density(precip, bw = bw),
main = "equivalent bandwidths, 7 different kernels")
for(i in 2:length(kernels))
lines(density(precip, bw = bw, adjust = h.f[i], kernel = kernels[i]),
col = i)
legend(55, 0.035, legend = kernels, col = seq(kernels), lty = 1)
# SIMULATING MULTIVARIATE DATA
# https://stat.ethz.ch/pipermail/r-help/2003-September/038314.html
# lets first simulate a bivariate normal sample
library(MASS)
# Simulate bivariate normal data
mu <- c(0,0)                         # Mean
Sigma <- matrix(c(1, .5, .5, 1), 2)  # Covariance matrix
# > Sigma
# [,1] [,2]
# [1,]  1.0  0.1
# [2,]  0.1  1.0
# Generate sample from N(mu, Sigma)
bivn <- mvrnorm(5000, mu = mu, Sigma = Sigma )  # from Mass package
head(bivn)
# Calculate kernel density estimate
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 50)   # from MASS package
# Contour plot overlayed on heat map image of results
image(bivn.kde)       # from base graphics package
contour(bivn.kde, add = TRUE)     # from base graphics package
install.packages("fuse", repos="http://R-Forge.R-project.org")
install.packages("tgp")
install.packages("fuse", repos="http://R-Forge.R-project.org")
library("fuse", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
data(DATA)
# returns the instantaneous runoff
Qinst <- fusesma.sim (DATA, mid = 650, deltim = 1,
rferr_add = 0, rferr_mlt = 1,
maxwatr_1 = 458.1, maxwatr_2 = 3147.06,
fracten = 0.267488, frchzne = 0.888808,
fprimqb = 0.642572, rtfrac1 = 0.477619, percrte = 358.852,
percexp = 10.8906, sacpmlt = 25.6919,sacpexp = 3.18839,
percfrac = 0.119675, iflwrte = 346.623,
baserte = 493.714, qb_powr = 7.29671, qb_prms = 0.210137,
qbrate_2a = 0.152566, qbrate_2b = 0.0501708,
sareamax = 0.349326, axv_bexp = 2.08099,
loglamb = 5.45848, tishape = 4.16578)
# returns the routed runoff
Qrout <- fuserouting.sim(Qinst, mid=5, deltim=1, timedelay = 0.462784)
Qrout
dim(Qrout)
length(Qrout)
plot(Qrout)
modllist
modlist
RunFUSE(DATA)
data(DATA)
# returns the instantaneous runoff
Qinst <- fusesma.sim (DATA, mid = 650, deltim = 1,
rferr_add = 0, rferr_mlt = 1,
maxwatr_1 = 458.1, maxwatr_2 = 3147.06,
fracten = 0.267488, frchzne = 0.888808,
fprimqb = 0.642572, rtfrac1 = 0.477619, percrte = 358.852,
percexp = 10.8906, sacpmlt = 25.6919,sacpexp = 3.18839,
percfrac = 0.119675, iflwrte = 346.623,
baserte = 493.714, qb_powr = 7.29671, qb_prms = 0.210137,
qbrate_2a = 0.152566, qbrate_2b = 0.0501708,
sareamax = 0.349326, axv_bexp = 2.08099,
loglamb = 5.45848, tishape = 4.16578)
image(DATA)
DATA
head(DATA)
plot(DATA$P)
plot(DATA$E)
plot(DATA$Q)
install.packages("RHydro", repos="http://R-Forge.R-project.org")
install.packages("lhs")
install.packages("XML")
install.packages("RHydro", repos="http://R-Forge.R-project.org")
library("RHydro", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
data(huagrahuma)
abc(pars=c(a=0.5,b=0.3,c=0.7), init=c(G=1), prec = huagrahuma$inputs$P, R.implement=TRUE)
#Todo: make more sensible example
abc(pars=c(a=0.5,b=0.3,c=0.7), init=c(G=1), prec = huagrahuma$inputs$P)
a = abc(pars=c(a=0.5,b=0.3,c=0.7), init=c(G=1), prec = huagrahuma$inputs$P)
a
a$q
dim(a)
dim(a$q)
length(a$q)
length(a$G)
length(a$q)
plot(a$q)
hist(a$q)
data(huagrahuma)
attach(huagrahuma)
output <- topmodel(parameters[1:9], inputs, topidx, delay)
#Use HydroModel structure:
mymodel <- HydroModel("topmodel", huagrahuma$parameters[1:9],
huagrahuma$inputs, delay = huagrahuma$delay,
topidx = huagrahuma$topidx)
predictions <- predict(mymodel, probs=c(0.05, 0.95))
mymodel
predictions
predictions$Q
length(predictions)
length(predictions$Q)
install.packages("rmarkdown")
library("rmarkdown", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library(rmarkdown)
# simple invocation
render("pres.Rmd", beamer_presentation())
library("uqms", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
gldToPlot(c(0, 2, 4, 4))
gldPlot(c(0, 2, 4, 4))
hist(gldToPlot(c(0, 2, 4, 4)))
gldToPlot(c(0, 2, 4, 4))
a = gldToPlot(c(0, 2, 4, 4))
a
dim(a)
length(a)
hist(gldToPlot(c(0, 2, 4, 4))$y)
hist(gldToPlot(c(0, 2, 4, 4))$y, 25)
hist(gldToPlot(c(0, 2, 4, 4))$x, 25)
plot(a$x, a$y)
plot(a$x, a$y, type = 'l')
hist(gldToPlot(c(0, 2, 4, 4))$y, 25)
hist(gldToPlot(c(0, 2, 4, 4))$x, 25)
lines(a$x, a$y, type = 'l')
Y = runif(1000)
L = c(0, 2, 4, 4)
x <- L[1] + (Y^L[3] - (1-Y)^L[4])/L[2]
y <- L[2]/(L[3]*Y^(L[3]-1) + L[4]*(1-Y)^(L[4]-1))
plot(x, y, type = 'l')
plot(x)
plot(y)
hist(y)
hist(x)
plot(x, type = 'l')
Y <- c(0.0001, 0.001*(1:9), 0.01*(1:99), .99+0.001*(1:9), .9999)
plot(Y)
Y = runif(1000)
plot(Y)
plot(order(Y))
Y = runif(1000)
plot(order(Y), type = 'l')
plot(Y, type = 'l')
Y
plot(sort(Y), type = 'l')
Y = runif(1000)
Y = sort(Y)
x <- L[1] + (Y^L[3] - (1-Y)^L[4])/L[2]
# Compute f(x) = PDF(x)
y <- L[2]/(L[3]*Y^(L[3]-1) + L[4]*(1-Y)^(L[4]-1))
plot(x, y, type="l")
Y = rnorm(1000)
Y = sort(Y)
x <- L[1] + (Y^L[3] - (1-Y)^L[4])/L[2]
# Compute f(x) = PDF(x)
y <- L[2]/(L[3]*Y^(L[3]-1) + L[4]*(1-Y)^(L[4]-1))
plot(x, y, type="l")
Y = rexp(1000)
Y = sort(Y)
x <- L[1] + (Y^L[3] - (1-Y)^L[4])/L[2]
# Compute f(x) = PDF(x)
y <- L[2]/(L[3]*Y^(L[3]-1) + L[4]*(1-Y)^(L[4]-1))
plot(x, y, type="l")
Y = runif(1000)
Y = sort(Y)
x <- L[1] + (Y^L[3] - (1-Y)^L[4])/L[2]
# Compute f(x) = PDF(x)
y <- L[2]/(L[3]*Y^(L[3]-1) + L[4]*(1-Y)^(L[4]-1))
plot(x, y, type="l")
mean(x)
mean(y)
Y = runif(1000)
Y = sort(Y)
x <- L[1] + (Y^L[3] - (1-Y)^L[4])/L[2]
# Compute f(x) = PDF(x)
y <- L[2]/(L[3]*Y^(L[3]-1) + L[4]*(1-Y)^(L[4]-1))
mean(x)
plot(x, y, type="l")
# The 5 Classes in the lambda_3 vs lambda_4 space.
y4 = seq(-1, 4, 0.1)
x4 = array(1, dim = c(51))
y3 = seq(1, 4, 0.1)
x3 = array(2, dim = c(31))
x2 = seq(1, 4, 0.1)
y2 = array(2, dim = c(31))
x = seq(0, 4, 0.1)
y = array(1, dim = c(41))
x5 = seq(0, 4, 0.1)
y5 = x5
tc = ggplot() + geom_line(aes(x = x, y = y), linetype = "dashed") +
geom_line(aes(x = x2, y = y2), linetype = "dashed") +
geom_line(aes(x = x3, y = y3), linetype = "dashed") +
geom_line(aes(x = x4, y = y4), linetype = "dashed") +
geom_line(aes(x = x5, y = y5)) +
theme_bw() + labs(y=TeX('$\\lambda_{4}'), x=TeX('$\\lambda_{3}'))
tc = tc + geom_label(aes(0.7, 0.3), label = "I") +
geom_label(aes(1.5, 0.3), label = "II") +
geom_label(aes(1.7, 1.3), label = "III") +
geom_label(aes(2.7, 1.3), label = "IV") +
geom_label(aes(2.7, 2.3), label = "V")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
# The 5 Classes in the lambda_3 vs lambda_4 space.
y4 = seq(-1, 4, 0.1)
x4 = array(1, dim = c(51))
y3 = seq(1, 4, 0.1)
x3 = array(2, dim = c(31))
x2 = seq(1, 4, 0.1)
y2 = array(2, dim = c(31))
x = seq(0, 4, 0.1)
y = array(1, dim = c(41))
x5 = seq(0, 4, 0.1)
y5 = x5
tc = ggplot() + geom_line(aes(x = x, y = y), linetype = "dashed") +
geom_line(aes(x = x2, y = y2), linetype = "dashed") +
geom_line(aes(x = x3, y = y3), linetype = "dashed") +
geom_line(aes(x = x4, y = y4), linetype = "dashed") +
geom_line(aes(x = x5, y = y5)) +
theme_bw() + labs(y=TeX('$\\lambda_{4}'), x=TeX('$\\lambda_{3}'))
tc = tc + geom_label(aes(0.7, 0.3), label = "I") +
geom_label(aes(1.5, 0.3), label = "II") +
geom_label(aes(1.7, 1.3), label = "III") +
geom_label(aes(2.7, 1.3), label = "IV") +
geom_label(aes(2.7, 2.3), label = "V")
library("latex2exp", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
# The 5 Classes in the lambda_3 vs lambda_4 space.
y4 = seq(-1, 4, 0.1)
x4 = array(1, dim = c(51))
y3 = seq(1, 4, 0.1)
x3 = array(2, dim = c(31))
x2 = seq(1, 4, 0.1)
y2 = array(2, dim = c(31))
x = seq(0, 4, 0.1)
y = array(1, dim = c(41))
x5 = seq(0, 4, 0.1)
y5 = x5
tc = ggplot() + geom_line(aes(x = x, y = y), linetype = "dashed") +
geom_line(aes(x = x2, y = y2), linetype = "dashed") +
geom_line(aes(x = x3, y = y3), linetype = "dashed") +
geom_line(aes(x = x4, y = y4), linetype = "dashed") +
geom_line(aes(x = x5, y = y5)) +
theme_bw() + labs(y=TeX('$\\lambda_{4}'), x=TeX('$\\lambda_{3}'))
tc = tc + geom_label(aes(0.7, 0.3), label = "I") +
geom_label(aes(1.5, 0.3), label = "II") +
geom_label(aes(1.7, 1.3), label = "III") +
geom_label(aes(2.7, 1.3), label = "IV") +
geom_label(aes(2.7, 2.3), label = "V")
tc
p1 <- gld.plot.gld(L = c(0, 1, 0.5, 0.6))
p2 <- gld.plot.gld(L = c(0, 1, 2, 0.5))
p3 <- gld.plot.gld(L = c(0, 1, 1.5, 1.5))
p4 <- gld.plot.gld(L = c(0, 1, 2.5, 1.5))
p5 <- gld.plot.gld(L = c(0, 1, 3, 3))
p1 = p1 + labs(title = "Class-I")
p2 = p2 + labs(title = "Class-II")
p3 = p3 + labs(title = "Class-III")
p4 = p4 + labs(title = "Class-IV")
p5 = p5 + labs(title = "Class-V")
grid.arrange(p1, p2, p3, p4, p5, nrow = 2)
library("gridExtra", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
p1 <- gld.plot.gld(L = c(0, 1, 0.5, 0.6))
p2 <- gld.plot.gld(L = c(0, 1, 2, 0.5))
p3 <- gld.plot.gld(L = c(0, 1, 1.5, 1.5))
p4 <- gld.plot.gld(L = c(0, 1, 2.5, 1.5))
p5 <- gld.plot.gld(L = c(0, 1, 3, 3))
p1 = p1 + labs(title = "Class-I")
p2 = p2 + labs(title = "Class-II")
p3 = p3 + labs(title = "Class-III")
p4 = p4 + labs(title = "Class-IV")
p5 = p5 + labs(title = "Class-V")
grid.arrange(p1, p2, p3, p4, p5, nrow = 2)
source('~/PhD/thesis_phd/uqms/uqms/R/gld.plot.R')
p1 <- gld.plot.gld(L = c(0, 1, 0.5, 0.6))
p2 <- gld.plot.gld(L = c(0, 1, 2, 0.5))
p3 <- gld.plot.gld(L = c(0, 1, 1.5, 1.5))
p4 <- gld.plot.gld(L = c(0, 1, 2.5, 1.5))
p5 <- gld.plot.gld(L = c(0, 1, 3, 3))
p1 = p1 + labs(title = "Class-I")
p2 = p2 + labs(title = "Class-II")
p3 = p3 + labs(title = "Class-III")
p4 = p4 + labs(title = "Class-IV")
p5 = p5 + labs(title = "Class-V")
grid.arrange(p1, p2, p3, p4, p5, nrow = 2)
library("FRK", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("SpatioTemporal")
q()
library("factoextra", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("FNN", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("randtoolbox")
library("randtoolbox", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
a = runif.sobol(1000)
b = rnorm.sobol(1000)
install.packages("sensitivity")
library("sensitivity", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library(boot)
n <- 1000
X1 <- data.frame(matrix(runif(8 * n), nrow = n))
X2 <- data.frame(matrix(runif(8 * n), nrow = n))
x <- sobol(model = sobol.fun, X1 = X1, X2 = X2, order = 2, nboot = 100)
print(x)
plot(x)
plot(X1, X2)
plot(X1$X1, X2$X1)
library(boot)
n <- 1000
X3 <- data.frame(matrix(rnorm(8 * n), nrow = n))
X4 <- data.frame(matrix(rnorm(8 * n), nrow = n))
plot(X3$X1, X4$X1)
ggplot()
gp = ggplot() + geom_point(aes(X1$X1, X2$X1)) + theme_bw()
gp
gp = ggplot() + geom_point(aes(X1$X1, X2$X1), col = "red") + theme_bw()
gp
gp = gp + geom_point(aes(X3$X1, X4$X1), col = "blue")
gp
library(boot)
n <- 1000
X1 <- data.frame(matrix(runif(8 * n, -3, 3), nrow = n))
X2 <- data.frame(matrix(runif(8 * n, -3, 3), nrow = n))
gp = ggplot() + geom_point(aes(X1$X1, X2$X1), col = "red") + theme_bw()
gp = gp + geom_point(aes(X3$X1, X4$X1), col = "blue")
gp
gp + labs(x = "x", y = "y")
gp
gp = gp + labs(x = "x", y = "y")
gp
setwd("~/PhD/PhDThesis/img/gld_clustering")
postscript("normal_uniform.eps", width = 15, height = 8, horizontal = FALSE,
onefile = FALSE, paper = "special",
family = "Courier")
gp
dev.off()
gp = ggplot() + geom_point(aes(X1$X1, X2$X1), col = "red", size = 3) + theme_bw()
gp
gp = gp + geom_point(aes(X3$X1, X4$X1), col = "blue", size = 3)
gp
gp = gp + labs(x = "x", y = "y")
postscript("normal_uniform.eps", width = 15, height = 8, horizontal = FALSE,
onefile = FALSE, paper = "special",
family = "Courier")
gp
dev.off()
